#--------------------------------------------
# C++ language project template
#
# default folder structure as follows
# <project root folder>
#      cmake/   <- here the additional modules with handy macro and finders
#      include/
#      src/
#      test/
#
#--------------------------------------------
cmake_minimum_required(VERSION 2.6 FATAL_ERROR)

# use standard file endings - rename to cxx if needed
set(SRC_EXT_PATTERN ".cpp")

# rename to your name here
set(PROJECT_NAME add_your_project_name_here)

# define project for C++ language
project(${PROJECT_NAME} CXX)

# enable TDD
include(CTest)
enable_testing()

# set where to find additional cmake modules if any
# comment it out if not required
set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake ${CMAKE_MODULE_PATH})

# user controlled options for build

# set boost library be used by default
option(USE_BOOST_LIB "Product should be build with Boost Library enabled" ON)

# set compiler support for C++11 standard
option(USE_CXX11_STD "Product should be build with C++11 compiler option enabled" ON)
#option(USE_FEATURE3 "Product should be build with option FEATURE3 enabled" OFF)

if(USE_CXX11_STD)
	if(CMAKE_COMPILER_IS_GNUCXX)
		set(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} "-std=c++11")
	else()
		# don't know so far how to enable it for clang/icc/msvc
		message(FATAL_ERROR "USE_CXX11_STD: only GCC is supported")
	endif()
endif()

if (USE_BOOST_LIB)
	#-- fix to handle newly released 1.51
	set(Boost_ADDITIONAL_VERSIONS "1.51" "1.51.0")
	find_package(Boost)
	if(Boost_FOUND)
		include_directories(${Boost_INCLUDE_DIRS})
	else()
		message(FATAL_ERROR "USE_BOOST_LIB: Required Boost library")
	endif()
endif()

# add include path for project
# add additional path if required
include_directories(${PROJECT_SOURCE_DIR}/include)

# get all *.cpp files from src to build target
file(GLOB SRC_FILES ${PROJECT_SOURCE_DIR}/src/*${SRC_EXT_PATTERN})
source_group("Source Files" FILES ${SRC_FILES})

# build target
add_executable(${PROJECT_NAME} ${SRC_FILES})

# linker command - add additional libraries for build target
if (USE_BOOST_LIB AND Boost_FOUND)
	target_link_libraries(${PROJECT_NAME} ${Boost_LIBRARIES})
endif()

